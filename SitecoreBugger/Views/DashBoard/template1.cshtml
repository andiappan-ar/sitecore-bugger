
@{
    ViewBag.Title = "T1";
    Layout = "~/Views/Layout/_Account.cshtml";
}
<link href="~/Content/Styles/style.css" rel="stylesheet" />
<div class="wrapper">
    <!-- Sidebar  -->
    <nav id="sidebar">
        <div class="sidebar-header">
            <h3><i id="sc_bugger-bug-icon-b" class="fa fa-bug"></i> Sitecore Bugger</h3>
            <strong><i id="sc_bugger-bug-icon-b" class="fa fa-bug"></i></strong>
        </div>
        <ul class="list-unstyled components">
            <li class="active">
                <a href="#homeSubmenu" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle">
                    <i class="fa fa-home"></i>
                    Home
                </a>
                <ul class="collapse list-unstyled" id="homeSubmenu">
                    <li>
                        <a href="#">Home 1</a>
                    </li>
                    <li>
                        <a href="#">Home 2</a>
                    </li>
                    <li>
                        <a href="#">Home 3</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#">
                    <i class="fa fa-briefcase"></i>
                    About
                </a>
                <a href="#pageSubmenu" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle">
                    <i class="fa fa-copy"></i>
                    Pages
                </a>
                <ul class="collapse list-unstyled" id="pageSubmenu">
                    <li>
                        <a href="#">Page 1</a>
                    </li>
                    <li>
                        <a href="#">Page 2</a>
                    </li>
                    <li>
                        <a href="#">Page 3</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#">
                    <i class="fa fa-address-card"></i>
                    Portfolio
                </a>
            </li>
            <li>
                <a href="#">
                    <i class="fa fa-question"></i>
                    FAQ
                </a>
            </li>
            <li>
                <a href="#">
                    <i class="fa fa-paper-plane"></i>
                    Contact
                </a>
            </li>
        </ul>
        <ul class="list-unstyled CTAs">
            <li>
                <a href="https://github.com/andiappan-ar/sitecore-bugger" class="download">Go to source</a>
            </li>
            <li>
                <a href="https://bootstrapious.com/p/bootstrap-sidebar" class="article">Back to article</a>
            </li>
        </ul>

    </nav>
    <!-- Page Content  -->
    <div id="content">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <button type="button" id="sidebarCollapse" class="btn btn-info">
                    <i class="fa fa-arrows-h"></i>
                </button>
                <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <i class="fa fa-align-justify"></i>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="nav navbar-nav ml-auto">
                        <li class="nav-item active">
                            <a class="nav-link" href="#"><i class="fa fa-bell"></i></a>
                        </li>
                        <li class="nav-item active">
                            <a class="nav-link" href="#">
                                <i class="fa fa-user-circle">
                                    Andiappan AR
                                </i>
                            </a>
                        </li>
                    </ul>
                </div>

            </div>
        </nav>

        <h2>Dashboard</h2>



        <div class="container-fluid">
            <p>
                <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    Filter <i class="fa fa-filter" aria-hidden="true"></i>
                </button>
            </p>
            <div class="collapse bg-info" id="collapseExample">

                <br />

                <div class="row">
                    <div class="col-11">
                        <div class="autocomplete">
                            <input id="filter-main-search-issue" type="text" name="myCountry" placeholder="Search issue" class="form-control-lg">
                        </div>
                    </div>
                    <div class="col">
                        <a href="#" id="filter-clear" class="float-right text-white"><i class="fa fa-undo fa-2x"></i></a>
                    </div>
                </div>

                <br />

                <div class="row">

                    <div class="col">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="filter-myitems">
                            <label class="form-check-label" for="gridCheck">
                                My items
                            </label>
                        </div>
                    </div>

                </div>

                <br />

                <div class="row">
                    <div class="col">
                        <label class="form-check-label" for="gridCheck">
                            Error type:
                        </label>
                        <select id="filter-error-type" class="browser-default custom-select colorful-select dropdown-success" multiple>
                            <option value="Functional">Functional</option>
                            <option value="Design">Design</option>
                            <option value="Environmental">Environmental</option>
                        </select>
                    </div>
                    <div class="col">
                        <label class="form-check-label" for="gridCheck">
                            Error severity:
                        </label>
                        <select id="filter-error-severity" class="browser-default custom-select colorful-select dropdown-success" multiple>
                            <option value="Critical">Critical</option>
                            <option value="High">High</option>
                            <option value="Medium">Medium</option>
                            <option value="Low">Low</option>
                        </select>
                    </div>
                    <div class="col">
                        <label class="form-check-label" for="gridCheck">
                            Error status:
                        </label>
                        <select id="filter-error-status" class="browser-default custom-select colorful-select dropdown-success" multiple>
                            <option value="open">Open</option>
                            <option value="closed">Closed</option>
                            <option value="re-opened">Re opened</option>
                            <option value="not-reproduced">Not reproduced</option>
                            <option value="not-an-issue">Not an issue</option>
                        </select>
                    </div>
                </div>
                <br />

            </div>
        </div>



        <div class="container-fluid">

            <div class="row">
                <div class="col">
                    <h4>Filter view</h4>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <select id="filter-error-view" class="browser-default custom-select colorful-select dropdown-success">
                        <option selected>Change View</option>
                        <option value="card">Card view</option>
                        <option value="detail">Detailed view</option>
                        <option value="mini">Mini view</option>
                    </select>
                </div>
            </div>


            <div class="row">
                <div class="col">
                    <h2 id="issue-list-view-type-head"></h2>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <div class="card-">
                        <div id="issue-list-card-details" class="card-columns">

                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>

    <!--Error detail modal-->
    <div class="sc_bugger-element-modal sc_bugger-element modal error-detail-modal buger-element" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header sc_bugger-element-background-color">
                    <h4 class="modal-title">Error :  <span id="errorID"></span> </h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body sc_bugger-element-background-color-light">
                    <div class="form-group">
                        <label class="" for="exampleFormControlInput1">Error title</label>
                        <input type="text" class="form-control" id="errorTitle">
                    </div>
                    <div class="form-group">
                        <label class="" for="exampleFormControlSelect1">Error type</label>
                        <select class="form-control" id="errorType">
                            <option value="Functional">Functional</option>
                            <option value="Design">Design</option>
                            <option value="Environmental">Environmental</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="" for="exampleFormControlSelect1">Error Severity</label>
                        <select class="form-control" id="errorSeverity">
                            <option value="Critical">Critical</option>
                            <option value="High">High</option>
                            <option value="Medium">Medium</option>
                            <option value="Low">Low</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="" for="exampleFormControlSelect1">Error Severity</label>
                        <select class="form-control" id="errorStatus">
                            <option value="open">Open</option>
                            <option value="closed">Closed</option>
                            <option value="re-opened">Re opened</option>
                            <option value="not-reproduced">Not reproduced</option>
                            <option value="not-an-issue">Not an issue</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="" for="exampleFormControlTextarea1">Error detail (Html allowed)</label>
                        <textarea class="form-control" id="errorDetail" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <p>
                            <a class="btn btn-primary" data-toggle="collapse" href="#collapseExample" role="button"
                               aria-expanded="false" aria-controls="collapseExample">
                                Device details
                            </a>
                        </p>
                        <div class="collapse" id="collapseExample">
                            <div id="browser-detail" class="card card-body">
                            </div>
                        </div>
                    </div>
                    <div class="form-group sc_bugger-screen-shot-div sc_bugger-hide ">
                        <div class="input-group">
                            <span class="input-group-btn">
                                <span class="btn btn-default btn-file">
                                    <label>Upload your own screen shot</label>
                                    <input type="file" accept="image/*" id="sc_bugger-upload-screenshot">
                                </span>
                            </span>
                        </div>
                        <figure class="figure">
                            <img id="error-screen-shot" class="figure-img img-fluid rounded">
                            <figcaption class="figure-caption text-right">Screen shot of an issue.</figcaption>
                        </figure>
                    </div>
                </div>

                <div class="modal-footer sc_bugger-element-background-color">
                    <button id="sc_bugger-submit-error" type="button" class="btn btn-primary sc_bugger-hide">Submit</button>
                    <button id="sc_bugger-save-error" type="button" class="btn btn-primary ">Add detail</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>


</div>
<script type="text/javascript">

    var SC_DASHBOARD = (function () {
        return {
            Config: {
                ProjectName: "Bugger",
            },
            Settings: {
                CSS: {
                    SeverityColor: {
                        Critical: "text-white bg-danger",
                        High: "text-white bg-dark",
                        Medium: "text-dark bg-warning",
                        Low: "text-secondary bg-light",
                    }
                }
            },
            GlobalVariables: {
                GlobalFilter: {
                    Id: null,
                    Type: null,
                    Severity: null,
                    IsMyItem: null,
                    Status: null,
                    DateRange: null,
                    FilterView: null,
                    Meta: {
                        ViewTypeDisplayName: null
                    }
                },
            },
            Issues: {
                All: [
                    {
                        Id: "E001",
                        Type: "Functional",
                        Severity: "High",
                        IsMyItem: null,
                        Status: "open",
                        Date: new Date(),

                        Title: "Issue title here",
                        Description: "Issue desc here",
                        Image: "https://www.pixelstalk.net/wp-content/uploads/2016/07/1080p-Wallpapers-Full-HD-Download-768x432.jpg",

                    },
                    {
                        Id: "E002",
                        Type: "Functional",
                        Severity: "Critical",
                        IsMyItem: null,
                        Status: "open",
                        Date: new Date(),

                        Title: "Issue title here",
                        Description: "Issue desc Issue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc here",
                        Image: "https://searchengineland.com/figz/wp-content/seloads/2015/12/google-amp-fast-speed-travel-ss-1920.jpg",

                    },
                    {
                        Id: "E003",
                        Type: "Functional",
                        Severity: "Low",
                        IsMyItem: null,
                        Status: "open",
                        Date: new Date(),

                        Title: "Issue title 66666666666666666666 6    6666 6 6 6  6 66 6",
                        Description: "Issue desc 55555555555555555555555555555555555555555e",
                        Image: "https://www.pixelstalk.net/wp-content/uploads/2016/07/1080p-Wallpapers-Full-HD-Download-768x432.jpg",

                    },
                    {
                        Id: "F001",
                        Type: "Functional",
                        Severity: "Medium",
                        IsMyItem: null,
                        Status: "open",
                        Date: new Date(),

                        Title: "Issue title here",
                        Description: "Issue desc Issue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc hereIssue desc here",
                        Image: "https://yt3.ggpht.com/a/AGF-l7-BBIcC888A2qYc3rB44rST01IEYDG3uzbU_A=s900-c-k-c0xffffffff-no-rj-mo",

                    },
                    {
                        Id: "F002",
                        Type: "Functional",
                        Severity: "Critical",
                        IsMyItem: null,
                        Status: "open",
                        Date: new Date(),

                        Title: "Issue title here",
                        Description: "Issue desc Issue ",
                        Image: "https://www.pixelstalk.net/wp-content/uploads/2016/07/1080p-Wallpapers-Full-HD-Download-768x432.jpg",

                    },
                    {
                        Id: "C002",
                        Type: "Functional",
                        Severity: "Critical",
                        IsMyItem: null,
                        Status: "open",
                        Date: new Date(),

                        Title: "Issue title here",
                        Description: "Issue desc Issue ",
                        Image: "https://www.pixelstalk.net/wp-content/uploads/2016/07/1080p-Wallpapers-Full-HD-Download-768x432.jpg",

                    },
                    {
                        Id: "CC002",
                        Type: "Functional",
                        Severity: "Critical",
                        IsMyItem: null,
                        Status: "closed",
                        Date: new Date(),

                        Title: "Issue title here",
                        Description: "Issue desc Issue ",
                        Image: "https://www.pixelstalk.net/wp-content/uploads/2016/07/1080p-Wallpapers-Full-HD-Download-768x432.jpg",

                    },
                    {
                        Id: "F002CCC",
                        Type: "Functional",
                        Severity: "Critical",
                        IsMyItem: null,
                        Status: "closed",
                        Date: new Date(),

                        Title: "Issue title here",
                        Description: "Issue desc Issue ",
                        Image: "https://www.pixelstalk.net/wp-content/uploads/2016/07/1080p-Wallpapers-Full-HD-Download-768x432.jpg",

                    },

                ],
            },
            Init: function () {
                SC_DASHBOARD.EventListeners.Init();
            },
            EventListeners: {
                Init: function () {
                    SC_DASHBOARD.EventListeners.DocumentReadyEvent();

                    SC_DASHBOARD.FunctionalMethods.ActivateAutoComplete();
                },
                //Selector : $(document)
                DocumentReadyEvent: function () {
                    $(document).ready(function () {
                        SC_DASHBOARD.EventListeners.DashBoardEvents.NavigationEvents();
                        SC_DASHBOARD.EventListeners.FilterEvents();
                        SC_DASHBOARD.EventListeners.ListEvents();
                    });
                },
                DashBoardEvents: {
                    NavigationEvents: function () {
                        $('#sidebarCollapse').on('click', function () {
                            $('#sidebar').toggleClass('active');
                        });
                    }
                },
                FilterEvents: function () {
                    // Is my item, check event
                    $('#filter-myitems').change(function () {
                        SC_DASHBOARD.GlobalVariables.GlobalFilter.IsMyItem = this.checked;
                    });

                    $('#filter-error-type').on('change', function () {
                        SC_DASHBOARD.GlobalVariables.GlobalFilter.Type = this.value;
                    });

                    $('#filter-error-severity').on('change', function () {
                        SC_DASHBOARD.GlobalVariables.GlobalFilter.Severity = this.value;
                    });

                    $('#filter-error-status').on('change', function () {
                        SC_DASHBOARD.GlobalVariables.GlobalFilter.Status = this.value;
                    });

                    $('#filter-error-view').on('change', function () {
                        SC_DASHBOARD.GlobalVariables.GlobalFilter.FilterView = this.value;

                        SC_DASHBOARD.GlobalVariables.GlobalFilter.Meta.ViewTypeDisplayName = $("#filter-error-view option:selected").text();

                        SC_DASHBOARD.FunctionalMethods.IssueList.RefreshIssueList();
                    });

                    $('#filter-clear i').on('click', function () {
                        $('#filter-error-type,#filter-error-severity,#filter-error-status').val("");
                        $("#filter-myitems").prop("checked", false);
                    });

                },
                ListEvents: function () {
                    $(document).on("click", "#issue-list-card-details .card .card-header a", function () {
                        $('.sc_bugger-element-modal.error-detail-modal').modal('show');

                        var editableData = SC_DASHBOARD.Issues.All.filter(element => element.Id == $(this).closest(".card").attr("id"))[0];

                        $("#errorID").text(editableData.Id);
                        $("#errorTitle").val(editableData.Title);
                        $("#errorDetail").val(editableData.Description);
                        $("#errorType").val(editableData.Type);
                        $("#errorSeverity").val(editableData.Severity);
                        $("#errorStatus").val(editableData.Status);
                        $("#error-screen-shot").attr("src", editableData.Image);
                       
                    });
                   
                }
            },
            FunctionalMethods: {
                ActivateAutoComplete: function () {
                    /*initiate the autocomplete function on the "filter-main-search-issue" element, and pass along the countries array as possible autocomplete values:*/
                    SC_DASHBOARD.UtilityMethods.AutoCompleteEvents(document.getElementById("filter-main-search-issue"), SC_DASHBOARD.Issues.All);
                },
                IssueList: {
                    TempServerCall: function () {

                    },
                    GetIssueList: function () {

                        // Get filter information

                        // pass it to server

                        // get json

                        // Refresh issue list

                    },
                    RefreshIssueList: function () {



                        //var _IssueModel = {

                        //    Id: null,
                        //    Type: null,
                        //    Severity: null,
                        //    IsMyItem: null,
                        //    Date: null,

                        //    Title: null,
                        //    Description: null,
                        //    Image: null,

                        //};

                        var currentIssueList = SC_DASHBOARD.Issues.All;

                        var listElement = [];

                        $.each(currentIssueList, function (i, _issue) {

                            // Frame json
                            var cardViewTemplateFields = {
                                id: _issue.Id,
                                idFramed: " id='" + _issue.Id + "' ",
                                Image: _issue.Image,
                                Title: _issue.Title,
                                Description: _issue.Description,
                                Date: _issue.Date,
                                SeverityColor: " " + SC_DASHBOARD.UtilityMethods.GetSeverityColor(_issue.Severity) + " ",
                            };

                            var templateString = null;



                            switch (SC_DASHBOARD.GlobalVariables.GlobalFilter.FilterView) {
                                case "card":
                                    templateString = `<div` + cardViewTemplateFields.idFramed + `class="card` + cardViewTemplateFields.SeverityColor + `">
                                                        <div class="card-header">` + cardViewTemplateFields.id + `
                                                    <a href="#" class="float-right text-primary" ><i class="fa fa-pencil-square-o fa-2x"></i></a>
                                                    </div>
                                                            <img class="card-img-top" src="` + cardViewTemplateFields.Image + `">
                                                            <div class="card-body">
                                                                <h5 class="card-title">` + cardViewTemplateFields.Title + `</h5>
                                                                <p class="">` + cardViewTemplateFields.Description + `</p>
                                                                <p class="card-text"><small class="text-muted">` + cardViewTemplateFields.Date + `</small></p>
                                                            </div>
                                                        </div>`;
                                    break;
                                case "detail":
                                    templateString = `<div ` + cardViewTemplateFields.idFramed + `class="card mb-3` + cardViewTemplateFields.SeverityColor + `">
                                                    <div class="card-header">` + cardViewTemplateFields.id + `
                                                    <a href="#" class="float-right text-primary" ><i class="fa fa-pencil-square-o fa-2x"></i></a>
                                                    </div>
                                                    <img class="card-img-top" src="` + cardViewTemplateFields.Image + `">
                                                    <div class="card-body">
                                                        <h5 class="card-title">` + cardViewTemplateFields.Title + `</h5>
                                                        <p class="card-text">` + cardViewTemplateFields.Description + `</p>
                                                        <p class="card-text"><small class="text-muted">` + cardViewTemplateFields.Date + `</small></p>
                                                    </div>
                                                </div>`;
                                    break;
                                case "mini":
                                    templateString = `<div ` + cardViewTemplateFields.idFramed + `class="card text-white ` + cardViewTemplateFields.SeverityColor + ` mb-3" style="max-width: 18rem;">
                                                    <div class="card-header">` + cardViewTemplateFields.id + `
                                                    <a href="#" class="float-right text-primary" ><i class="fa fa-pencil-square-o fa-2x"></i></a>
                                                    </div>
                                                    <div class="card-body">
                                                        <h5 class="card-title">` + cardViewTemplateFields.Title + `</h5>
                                                        <p class="card-text">` + cardViewTemplateFields.Description + `</p>
                                                    </div>
                                                </div>`;
                                    break;
                            }

                            listElement.push($(templateString));
                        });

                        // Heading
                        $("#issue-list-view-type-head").text(SC_DASHBOARD.GlobalVariables.GlobalFilter.Meta.ViewTypeDisplayName);
                        // List
                        $("#issue-list-card-details").html("");
                        $("#issue-list-card-details").append(listElement);
                    }
                }

            },
            UtilityMethods: {
                AutoCompleteEvents: function (inp, arr) {
                    /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
                    var currentFocus;
                    /*execute a function when someone writes in the text field:*/
                    inp.addEventListener("input", function (e) {
                        var a, b, i, val = this.value;
                        /*close any already open lists of autocompleted values*/
                        closeAllLists();
                        if (!val) { return false; }
                        currentFocus = -1;
                        /*create a DIV element that will contain the items (values):*/
                        a = document.createElement("DIV");
                        a.setAttribute("id", this.id + "autocomplete-list");
                        a.setAttribute("class", "autocomplete-items");
                        /*append the DIV element as a child of the autocomplete container:*/
                        this.parentNode.appendChild(a);
                        /*for each item in the array...*/
                        for (i = 0; i < arr.length; i++) {
                            /*check if the item starts with the same letters as the text field value:*/

                            if (arr[i].Id.substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                                /*create a DIV element for each matching element:*/
                                b = document.createElement("DIV");
                                /*make the matching letters bold:*/
                                b.innerHTML = "<strong>" + arr[i].Id.substr(0, val.length) + "</strong>";
                                b.innerHTML += arr[i].Id.substr(val.length);
                                /*insert a input field that will hold the current array item's value:*/
                                b.innerHTML += "<input type='hidden' value='" + arr[i].Id + "'>";
                                /*execute a function when someone clicks on the item value (DIV element):*/
                                b.addEventListener("click", function (e) {
                                    /*insert the value for the autocomplete text field:*/
                                    inp.value = this.getElementsByTagName("input")[0].value;
                                    /*close the list of autocompleted values,
                                    (or any other open lists of autocompleted values:*/
                                    closeAllLists();
                                });
                                a.appendChild(b);
                            }
                        }
                    });
                    /*execute a function presses a key on the keyboard:*/
                    inp.addEventListener("keydown", function (e) {
                        var x = document.getElementById(this.id + "autocomplete-list");
                        if (x) x = x.getElementsByTagName("div");
                        if (e.keyCode == 40) {
                            /*If the arrow DOWN key is pressed,
                            increase the currentFocus variable:*/
                            currentFocus++;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 38) { //up
                            /*If the arrow UP key is pressed,
                            decrease the currentFocus variable:*/
                            currentFocus--;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 13) {
                            /*If the ENTER key is pressed, prevent the form from being submitted,*/
                            e.preventDefault();
                            if (currentFocus > -1) {
                                /*and simulate a click on the "active" item:*/
                                if (x) x[currentFocus].click();
                            }
                        }
                    });
                    function addActive(x) {
                        /*a function to classify an item as "active":*/
                        if (!x) return false;
                        /*start by removing the "active" class on all items:*/
                        removeActive(x);
                        if (currentFocus >= x.length) currentFocus = 0;
                        if (currentFocus < 0) currentFocus = (x.length - 1);
                        /*add class "autocomplete-active":*/
                        x[currentFocus].classList.add("autocomplete-active");
                    }
                    function removeActive(x) {
                        /*a function to remove the "active" class from all autocomplete items:*/
                        for (var i = 0; i < x.length; i++) {
                            x[i].classList.remove("autocomplete-active");
                        }
                    }
                    function closeAllLists(elmnt) {
                        /*close all autocomplete lists in the document,
                        except the one passed as an argument:*/
                        var x = document.getElementsByClassName("autocomplete-items");
                        for (var i = 0; i < x.length; i++) {
                            if (elmnt != x[i] && elmnt != inp) {
                                x[i].parentNode.removeChild(x[i]);
                            }
                        }
                    }
                    /*execute a function when someone clicks in the document:*/
                    document.addEventListener("click", function (e) {
                        closeAllLists(e.target);
                    });
                }
                ,
                GetSeverityColor: function (severity) {
                    switch (severity) {
                        case "Critical":
                            return SC_DASHBOARD.Settings.CSS.SeverityColor.Critical;
                            break;
                        case "High":
                            return SC_DASHBOARD.Settings.CSS.SeverityColor.High;
                            break;
                        case "Medium":
                            return SC_DASHBOARD.Settings.CSS.SeverityColor.Medium;
                            break;
                        case "Low":
                            return SC_DASHBOARD.Settings.CSS.SeverityColor.Low;
                            break;
                        default:
                            return SC_DASHBOARD.Settings.CSS.SeverityColor.Low;
                            break;
                    }

                }
            }

        };
    }());

    SC_DASHBOARD.Init();


    function GetSeverityColor(severity) {
        return "red";
    }




</script>

<style type="text/css">

    /*the container must be positioned relative:*/
    .autocomplete {
        position: relative;
        display: inline-block;
    }



    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }


    /*model full screen*/
/*@@media (min-width: 576px) {
  .modal-dialog { max-width: none; }
}

.modal-dialog {
  width: 98%;
  height: 92%;
  padding: 0;
}

.modal-content {
  height: 99%;
}*/
</style>
